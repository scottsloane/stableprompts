import { program } from "commander";
import readline from "readline";
import colors from "colors";
import figlet from "figlet";
import PromptGen from "./functions/promptgen.js";
import Render from "./functions/render.js";
import Horde from "./functions/horde.js";

(async () => {
  let ren = false;
  let firstRender = true;

  // First thing first check the command line arguments
  program
    .option("-s, --settings <path>", "Path to settings file")
    .option("-r, --render", "Render all prompts")
    .option("-a, --api", "Activate API mode")
    .parse(process.argv);

  const options = program.opts();

  if (options.settings) {
    console.log(`Using settings file ${options.settings}`.yellow);
  }

  if (options.render) {
    console.log("Rendering all prompts".yellow);
    ren = true;
  }

  const rl = readline.createInterface(process.stdin, process.stdout);
  const promptGen = new PromptGen();
  const render = new Render();
  const horde = new Horde("https://stablehorde.net", "0000000000");

  if (options.api) {
    console.clear();
    console.log(await figlet.textSync("StablePrompts"));
    console.log("Version 0.0.1 by Scott Sloane @scottsloane".grey);
    console.log(
      "Welcome to the StablePrompts a text2image prompt generator!".green
    );
    console.log("API mode activated".yellow);
    console.log("Type '.exit' to exit the program.".grey);
    while (true) {
      let input = await new Promise((resolve) => {
        rl.question("(API mode): ", (answer) => {
          resolve(answer);
        });
      });
      if (input.trim() === ".exit") {
        break;
      }
      console.log("Unknown command...".yellow);
    }
  } else {
    console.clear();
    console.log(await figlet.textSync("StablePrompts"));
    console.log("Version 0.0.1 by Scott Sloane @scottsloane".grey);
    console.log(
      "Welcome to the StablePrompts a text2image prompt generator!".green
    );
    console.log(
      "Type '.exit' to exit the program. '.render' to toggle render mode. '.render last n' to render the last generation, where n is the prompt number (blank for all)"
        .grey
    );

    let q = "Enter an image idea: ";

    try {
      while (true) {
        let input = await new Promise((resolve) => {
          rl.question(q, (answer) => {
            resolve(answer);
          });
        });

        if (input.trim() === ".exit") {
          break;
        }

        if (input.trim() === ".render") {
          ren = !ren;
          q = ren ? "Enter an image idea (render): " : "Enter an image idea: ";
          if (ren) {
            console.log(
              "Render mode enabled. All generated prompts will be rendered with StableDiffusion"
                .yellow
            );
            if (firstRender) {
              console.log(
                "WARNING: Images are generated by StableHorde and are subject to their TOS. Do not use this tool to generate images that are against the StableHorde TOS (you will be banned)"
                  .yellow
              );
              firstRender = false;
            }
          } else console.log("Render mode disabled.".yellow);
          continue;
        }

        if (input.trim().startsWith(".render last")) {
          if (firstRender) {
            console.log(
              "WARNING: Images are generated by StableHorde and are subject to their TOS. Do not use this tool to generate images that are against the StableHorde TOS (you will be banned)"
                .yellow
            );
            firstRender = false;
            let confirm = await new Promise((resolve) => {
              rl.question("Type y(es) to contunue", (answer) => {
                resolve(answer);
              });
            });
            if (!["y", "yes"].includes(confirm.trim())) {
              console.log("Aborting render.".red);
              continue;
            }
          }
          // render the last prompt; if n is blank, render all
          const a = input.trim().split(" ");
          if (a.length > 2) {
            const i = parseInt(a[2]);
            if (isNaN(i)) {
              console.log("Invalid prompt number.".red);
              continue;
            }
            // render prompt i
            console.log(`Rendering prompt ${i}...`.yellow);
            if (promptGen.last === null) {
              console.log("No previous prompt to render.".red);
              continue;
            }
            if (i > promptGen.last.length) {
              console.log("Invalid prompt number.".red);
              continue;
            }
            const prompt = promptGen.last[i - 1];
            const response = await horde.generate(prompt);
            console.log(response);
          } else {
            // render all
            console.log("Rendering last prompt...".yellow);
            if (promptGen.last === null) {
              console.log("No previous prompt to render.".red);
              continue;
            }
            // const prompt = promptGen.last.join("\n");
            for (let prompt of promptGen.last) {
              const response = await horde.generate(prompt);
              console.log(response);
            }
          }
          continue;
        }

        console.log("Generating prompt...".yellow);
        const prompt = await promptGen.generate(input);
        console.log(prompt);
      }
    } catch (e) {
      console.log(e);
    }
  }
  console.log("Bye!".green);
  process.exit(0);
})();
